// <auto-generated />
using System;
using AeroSceneryHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AeroSceneryHub.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180911173801_AddingIndexes")]
    partial class AddingIndexes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AeroSceneryHub.Models.Airport", b =>
                {
                    b.Property<long>("AirportId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckOutComment");

                    b.Property<string>("CheckedOutByUserId");

                    b.Property<DateTime?>("CheckedOutOn");

                    b.Property<long?>("CityId");

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(255)")
                        .HasMaxLength(255);

                    b.Property<long?>("CountryId");

                    b.Property<string>("FAACode")
                        .HasColumnType("VARCHAR(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("HasPavement");

                    b.Property<bool>("Hidden");

                    b.Property<string>("IATA")
                        .HasColumnType("VARCHAR(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ICAO")
                        .HasColumnType("VARCHAR(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsHelipad");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RegionCode")
                        .HasColumnType("VARCHAR(255)")
                        .HasMaxLength(255);

                    b.Property<long?>("RegionId");

                    b.Property<int>("RunwayCount");

                    b.Property<int>("RunwaySurfaceType");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<bool>("XP3D");

                    b.HasKey("AirportId");

                    b.HasIndex("CheckedOutByUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.AirportVersion", b =>
                {
                    b.Property<long>("AirportVersionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AirportId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<bool>("Is3D");

                    b.Property<int>("ModerationStatus");

                    b.Property<DateTime?>("OriginalDataUpdatedOn");

                    b.Property<bool>("RecommendedVersion");

                    b.Property<string>("ReleaseNotes")
                        .HasColumnName("Comment")
                        .HasColumnType("text");

                    b.Property<string>("UserId");

                    b.HasKey("AirportVersionId");

                    b.HasIndex("AirportId");

                    b.HasIndex("UserId");

                    b.ToTable("AirportVersions");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.AirportVersionComment", b =>
                {
                    b.Property<long>("AirportVersionCommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AirportVersionId");

                    b.Property<string>("Comment")
                        .HasColumnName("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded");

                    b.HasKey("AirportVersionCommentId");

                    b.HasIndex("AirportVersionId");

                    b.ToTable("AirportVersionComments");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.City", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)")
                        .HasMaxLength(255);

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(255)")
                        .HasMaxLength(255);

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.CultivationGridSquare", b =>
                {
                    b.Property<long>("CultivationGridSquareId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("EastLongitude");

                    b.Property<string>("GridSquareName")
                        .HasColumnType("VARCHAR(255)")
                        .HasMaxLength(255);

                    b.Property<double>("NorthLatitude");

                    b.Property<double>("SouthLatitude");

                    b.Property<double>("WestLongitude");

                    b.HasKey("CultivationGridSquareId");

                    b.ToTable("CultivationGridSquares");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.CultivationGridSquareVersion", b =>
                {
                    b.Property<long>("CultivationGridSquareVersionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CultivationGridSquareId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<int>("ModerationStatus");

                    b.Property<bool>("RecommendedVersion");

                    b.Property<string>("UserId");

                    b.HasKey("CultivationGridSquareVersionId");

                    b.HasIndex("CultivationGridSquareId");

                    b.HasIndex("UserId");

                    b.ToTable("CultivationGridSquareVersions");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.CultivationGridSquareVersionComment", b =>
                {
                    b.Property<long>("CultivationGridSquareVersionCommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasColumnName("Comment")
                        .HasColumnType("text");

                    b.Property<long>("CultivationGridSquareVersionId");

                    b.Property<DateTime>("DateAdded");

                    b.HasKey("CultivationGridSquareVersionCommentId");

                    b.HasIndex("CultivationGridSquareVersionId");

                    b.ToTable("CultivationGridSquareVersionComments");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.Region", b =>
                {
                    b.Property<long>("RegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.Airport", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CheckedOutByUser")
                        .WithMany()
                        .HasForeignKey("CheckedOutByUserId");

                    b.HasOne("AeroSceneryHub.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("AeroSceneryHub.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("AeroSceneryHub.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.AirportVersion", b =>
                {
                    b.HasOne("AeroSceneryHub.Models.Airport", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.AirportVersionComment", b =>
                {
                    b.HasOne("AeroSceneryHub.Models.AirportVersion", "AirportVersion")
                        .WithMany()
                        .HasForeignKey("AirportVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AeroSceneryHub.Models.CultivationGridSquareVersion", b =>
                {
                    b.HasOne("AeroSceneryHub.Models.CultivationGridSquare", "CultivationGridSquare")
                        .WithMany()
                        .HasForeignKey("CultivationGridSquareId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AeroSceneryHub.Models.CultivationGridSquareVersionComment", b =>
                {
                    b.HasOne("AeroSceneryHub.Models.CultivationGridSquareVersion", "CultivationGridSquareVersion")
                        .WithMany()
                        .HasForeignKey("CultivationGridSquareVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
