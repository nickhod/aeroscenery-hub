!function(e){var n={};function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)o.d(t,r,function(n){return e[n]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=o(1),r=o(2),a=o(3),i=o(4),u=function(){return function(){var e=this;Navigo.MATCH_REGEXP_FLAGS="i";var n=new Navigo(null,!1);console.log("router"),n.on({"airports/*":function(){e.airportDetails=new t.AirportDetails},"cultivation/*":function(){e.cultivationGridSquareDetails=new a.CultivationGridSquareDetails},cultivation:function(){e.cultivationGridSquares=new r.CultivationGridSquares},"*":function(){e.airports=new i.Airports}}).resolve()}}();n.Main=u,window.aerosceneryHub=new u},function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=function(){function e(){}return e.prototype.showMap=function(e,n){var o={lat:e,lng:n};new google.maps.Map(document.getElementById("map"),{zoom:15,center:o,mapTypeId:google.maps.MapTypeId.SATELLITE})},e}();n.AirportDetails=t},function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=function(){function e(){}return e.prototype.showMap=function(){var e=this;$.ajax({url:"/lib/google-maps-gridlines/google-maps-gridlines.js",dataType:"script",success:function(){e.gridLinesLoaded()},async:!0,cache:!0})},e.prototype.gridLinesLoaded=function(){var e=new google.maps.Map(document.getElementById("map-container"),{zoom:3,center:{lat:10,lng:0},mapTypeId:google.maps.MapTypeId.HYBRID,disableDefaultUI:!0});new Graticule(e)},e}();n.CultivationGridSquares=t},function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=function(){return function(){}}();n.CultivationGridSquareDetails=t},function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=function(){function e(){}return e.prototype.showMap=function(){var e=this,n=new google.maps.Map(document.getElementById("map-container"),{zoom:3,center:{lat:10,lng:0},mapTypeId:google.maps.MapTypeId.HYBRID,disableDefaultUI:!0}),o=new google.maps.FusionTablesLayer({query:{select:"'Geocodable address'",from:"1KD7cUPVJTpN49_m2gvAzAY8c_C6SVA3AE8qPs3WA"},styles:[{markerOptions:{iconName:"measle_grey"}},{where:"Available > 0",markerOptions:{iconName:"small_red"}}],suppressInfoWindows:!0});o.setMap(n),google.maps.event.addListener(o,"click",function(o){console.log(o.row);var t={name:o.row.Name.value,code:o.row.Code.value,available:o.row.Available.value,runwayCount:o.row.RunwayCount.value,runwaySurfaceType:o.row.RunwaySurfaceType.value},r=$.templates("#airport-info-window-template").render(t),a=new google.maps.LatLng(o.row.Latitude.value,o.row.Longitude.value),i=r;e.currentInfoWindow&&e.currentInfoWindow.close&&e.currentInfoWindow.close(),e.currentInfoWindow=new google.maps.InfoWindow({content:i,position:a,pixelOffset:o.pixelOffset}),e.currentInfoWindow.open(n)})},e}();n.Airports=t}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,